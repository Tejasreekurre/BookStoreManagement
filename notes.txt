Srinivas Dachepalli | 6305 730 633 | dachepallisrinivas@gmail.com

Abhishek Kumar - 9384526411
Aksheya -        9840129171

----------------------------------------------------------------------------

What is Java?
    is a high level strictly but partially object oriented progrmming.

    + Strictly object oriented, as there is no way possible to implement any java application 
      without using OOP.,
    + Partially object oriented, as java supports native variables and native types which are
      not objects and classes

Who developed Java?
    Sun microsystems - James Gosling
    Oracle corp. is the present owner of Java language.
    (www.oracle.com)

Histroy And Evolution
----------------------------------------
    JDK Alpha and Beta (1995)
    JDK 1.0 (23rd Jan 1996)
    JDK 1.1 (19th Feb 1997)
    J2SE 1.2 (8th Dec 1998)                             Stable  
    J2SE 1.3 (8th May 2000)
    J2SE 1.4 (6th Feb 2002)                             Stable and Prominent
    J2SE 5.0 (30th Sep 2004)                            Stable, Prominent and Revolutionary
    Java SE 6 (11th Dec 2006)
    Java SE 7 (28th July 2011)
    Java SE 8 (18th Mar 2014)   (LTS)                   Stable and Most used on current day 
    Java SE 9 (21st Sep 2017)
    Java SE 10 (20th Mar 2018)
    Java SE 11 (Sep 2018)       (LTS)                   Stable and being adopted 
    Java SE 12 (Mar 2019)
    Java SE 13 (Sep 2019)
    Java SE 14 (Mar 2020)
    Java SE 15 (Sep 2020)

Java Distributions
-------------------------------------
        JRE                 Java Runtime Environment         
                                {Java Libraries,GC,JVM,Interpreter,ClassLoader,ByteCodeVerifeir,...}
        
        JDK                 Java (Standard) Development Kit    
                                {JRE, Development Tools, IDE Support}

Java Editions
-------------------------------------

        Java Standard Edition 
        ==================================
                Core Language                
                Java Core Libraries
                -------------------------
                    java.lang               Math, String, System, Exceptions, Multi-Threading
                    (it is imported automatically)
                    java.time               Date and Time API
                    java.util               Generics and Collections
                    java.util.stream        Streams API and Lambda Expressions
                    java.util.regex         Regular Expressions
                    java.io                 IO Streams
                    java.nio                New IO Streams
                    java.sql                JDBC

        Java Enterprise Edition
        ==================================
            App                 Specifications            Implementations         Frameworks
            ----                -----------------------  ----------------        -------------
            Dynamic Web Apps    Servlets and JSP         WebServers like Tomcat     Struts
                                                                                    Spring

            ORM                 JPA, JTA                 Hibernate,TopLink,
                                                         EclipseLink...
                    
            WebServices         JAX-WS, JAX-RS           Axis2,Apache CXF
                                          
            Microservices ...and more

        Java Micro Edition
        ==================================

                supports smart device / smart card based application development.

C/C++ program execution process:
---------------------------------
text editor     -   source program  -                   sample.c / sample.cpp
compiler        -   object program  -                   sample.obj / sample.o
                    (intermeditate program)
linker          -   header files (.h)   -               sample.exe 
                    all the header files are linked 
                    to the object program and create
                    an executable program.
loader          -   to supply the executable code to
                    the  O/S for execution.

C/C++ languages are platform dependent languages. (here platform means o/s)

Java program excution process:
------------------------------
text editor             -   source code     -   sample.java
compiler   (javac)      -   byte code       -   sample.class   
                    (byte code is not in the form of 0's & 1's)

is this sample.class is targeted to one particular O/S ?
NO.

sample.class is not an executable program.

byte code   --> JVM (Java Virtual Machine) -> JVM will convert the byte code 
        into native machine code (sequence of 0's & 1's understood by that particular
        O/S in which the program is executed)
        the program is executed.

        machine code is generated ON-THE-FLY.

Java is platform (means o/s) independent language.

is JDK  common for all O/S? -   (platform dependent)
    NO
is JRE  common for all O/S? -   (platform dependent)
    No
is JVM  common for all O/S? -   (platform dependent)
    NO

BYTE CODE is the only one component which is platform independent.

is Native machine code common for all O/S?
    NO

JDK   (Java Development Kit)  
    for developers.
    lot of tools to develop java applications.
    
    javac   -   java compiler
    java    -   interpreter
    javadoc -   to create HTML documentation of a project
    javap
    jdb     -   java debugger
    appletviewer

JRE   (Java Runtime Environment)
    JRE provide JVM + other libraries

Features of Java:
-----------------
1. platform independent
2. object oriented 
3. secured
        no explicit pointers in java.
        java programs run inside a special environment i.e. JVM.
        JVM will talk to O/S.
        (JVM is a collection of programs - class-loader, byte-code-verifier, garbage-collector)
4. robust
        means fault-tolerant, strong, vigour and healthy.
        a. exception handling
        b. automatic garbage collection
        c. strong type checking.
5. self-documented (open source)
    source code is visible to anyone.
6. architectural neutral
7. compiled and interpreted



CODING STANDARDS / BEST PRACTICES
1. maintain proper indentation.
2. naming conventions



                            Java Tokens
                            -----------
smallest element in the program.

1. identifier
        it is a name given to variables, class, method names, package etc.,

        variable, method names must follow camel notation 
            first word is in lowercase.
            from the second word onwards use first letter of each word is in uppercase
            and rest in lower case.

            eg:
                length
                lengthOfRectangle
                circleArea

                acceptData()
                showMinMaxInArray()
        
        class names, file name and project must follow pascal notation.
        (first letter of each word in uppercase and the rest in lowercase).
            eg:
                ArrayIndexOutOfBoundsException
                RuntimeException
                String

        package name
            always in lowercase
            there are often abbreviated.
            eg:
                io
                lang
                awt
                util
                
        constants
            always be in uppercase.
            it is a name given to literal.
            it is immutable.
            it is qualified with "final" keyword.
            they can be separated with an underscore.

            final double PIE = 3.14;
                    PIE is a constant.
                    3.14 is literal

            final int PASS_MARKS = 35;
            final int MAX_MARKS = 100;
            final int BATCH_CAPACITY = 40;
            
            double circumference = 2 * PIE * radius;

            keyword         double
            indentifier     circumference
            operator        =
            literal         2
            operator        *
            constant        PIE
            operator        *
            identifier      radius
            operator        ;


2. keywords
        these are also reserved words.
        eg: if, switch, for, while
            int, float, double

3. operators
        unary operators
           which takes only one operand.
           ++   --  !    
        binary operators
            it takes two operands
            all the remaining 
        ternary operator
            which takes three operands.
            conditional operator


        a) arithmetic operators :   +   -   *   /   %
        b) relational operator  :   >   <   ==  >=  <=  !=
        c) logical operators    :   &&  ||  !
        d) conditional operator :   (condition) ? true-statment : false-statement;
        e) assignment operator  :   =   +=  -=  *=  /=  %=
        f) increment / decrement :  ++, --
        g) bitwise operators    :   refer your self.
        h) misc. operators      :
                []
                ()
                <>
                ,
                .
                ;
                instanceof
4. literals
        any hard coded value.

        doule area = 3.14*radius*radius;

        3.14 is literal.

        a) integer literals
                i) decimal literal      (0-9)
                    30, -5

                ii) binary literal      (0,1)
                    0b101011
                    int a = 0b101;

                    observe the 0b prefix here.

                iii) octal literal      (0-7)
                    int a = 0234;

                    observe 0 prefix.

                iv) hexadecimal literal (0-9, A-F)
                    int a = 0xABC;

                    observe 0x prefix
                
        b) floating point literals
                3.14
        c) character literals
                character is a single alphabet, single digit or single special symbol.
                it the charcater is enclosed within single quotes, it is character constantt.

                'A'
                '7'
                '?'
                'AB'        invalid

                escape sequence characters:
                '\n'        new line character
                '\t'        tab


        d) string literals
                group of characters enclosed within double quotes.

                "srinivas"
                "49-53-20/25"
                "9247175823"
                "a"             
                ""              empty string

        e) boolean literals
                true, false

5. comments
        ignored by the compiler.

        end-of-line comment             //
        block comment                   /*  and */
        documentation comment           /** and */

Eclipse IDE:
------------
    1. change the perspective to "Java Perspective"
        (window -> perspective -> open perspective)
    2. change the Installed JRE : JDK1.8
        (windows -> preferences -> java -> installed jre)

    3. Create a java project : ToStartWith
        choose "default JRE as jdk1.8 ..." radio button

    Workspace, project are nothing folders in the o/s.


Package
------------
	It is a collection of classes, interfaces and sub-packages.
	If a class is not part of any package, it is automatically placed in "default package".
	purpose of a package is to solve name conflicts. 	
    if two or more classes share the same name, they cannot be part of the same package 
    as it leads to ambiguity.
    package is represented as a folder in O/S.

	if the class inside a package is public, we can make use of the class outside the package.

	whenever we have a public class, then the class name and file name must be the same.

	A single file can have only one public class. It can have any no. of non-public classes inside a single file.
	
	Name of the package is the reverse order of the web domain of the company.
    (www.capgemini.com)

    com.cg.tsw.ui, com.cg.tsw.model, com.cg.tsw.view, com.cg.tsw.controller


                                data types   
                                ----------
    primitve types
        numeric 
            integral
                byte        1
                short       2
                int         4
                long        8
            floating-point
                float       4
                double      8
        non-numeric
                char        2
                boolean     1 bit   -   true, false
                
                in java, true means not 1 and
                false means not 0.
                true, false are literals.

                void    
                generally used to specify the return type of a function.
    
    user-defined types
        class
        interface
        enum

                                            Control Structures
                                            ==================
if, if..else, switch, break, continue, 
while, do..while, for

we can use control structures to alter the program execution sequence.

if:
----
    it is a bi-directional decision making statement.

if (condition)
    st-1;           /* true statement */
[else
    st-2;]           /* false statement */

if (condition) {
    st-1;
    st-2;           /* true block */
    ...
} [ else {
    st-1;
    st-2;           /* false block */
    ...
} ]

what is a condition?
    condition means comparision.

what is the result of a condition?
    true / false

int a = 10, b = 15;
if (a > b);
    System.out.println(a);
System.out.println(b);

if (a > b)
    ;

System.out.println(a);
System.out.println(b);

just semi-colon indicates null statement.

output:
-------
10
15


int m = 10, n = 15;
if (m > n);
    System.out.println(m);
else
    System.out.println(n);

if (m > n)
    ;
System.out.println(m);

else
    System.out.println(n);

output:
-------
error : else without if.

types:
------
    simple if       (if without else)
    if .. else
    nested if       (if within if)
    ladder if       (if..else ladder)

+   string concatenation (joining) operator

1) write a java program to print whether a given year is leap or not.

nested if:
-----------
if (condition) {
    if (condition) {
        st-1;
        st-2;
        ...
    } else {
        st-1;
        st-2;
        ....
    }
}  else {
    if (condition) {
        st-1;
        st-2;
        ....
    } else {
        st-1;
        st-2;
        ...
    }
}

ladder if:
----------
if (condition) {
    st-1;
    st-2;
    ... 
} else if (condition) {
    st-1;
    st-2;
    ...
} else if (condition) {
    st-1;
    st-2;
    ...
} else {
    st-1;
    st-2;
    ...
}


2) switch:

    it is a multi-directional making statement.

syntax:
-------
    switch (var/expr) {
        case label-1 :  st-1;
                        st-2;
                        ...
                        [break;]
        case label-2 :  st-1;
                        st-2;
                        ...
                        [break;]
        ..  ..  ..  ..  ..  ..
        default:        st-1;
                        st-2;
                        ....
                        [break;]
    }


How do you accept data from the user?
--------------------------------------
    Scanner scan = new Scanner(System.in);

    nextInt()
    nextDouble()
    next()
    nextLine()

    Scanner class is available in java.util package.

    import java.util.Scanner;

    (or)

    type the fully qualified name.
    java.util.Scanner scan = new java.util.Scanner(System.in);



2) accept a day number. print the corresponding week day name.

0 - sunday
1 - monday
2 - tuesday

6  - saturday
invalid day number.

    System.in   refer to standard input device i.e., keyboard
    System.out  refer to standard output device i.e., VDU   (monitor)


class Test {
    public static void main(String [] args) {
        double height = 153.5;

        switch (height) {
            case 150 : System.out.println("Not accepted");
                       break;
            case 153 : System.out.println("considered");
                       break;
            case 153.5 : System.out.println("selected");
                        break;
        }
    }
}

switch will allow only certain datatypes.
1) byte, short, int, char, String, enum.
2) long, double, float, boolean are not allowed.

byte : 1 bytes
-128 to 127

byte b = 100;
int a = b;          // allowed.

3) accept two numbers and an arithmetic operator. perform the operation and print the result.

    10
    5
    /
    result : 2

15 minutes.


4) accept consumer number, last month reading, current month reading.
    calculate the electricity bill as per the following way ...

    no. of units                slab rate
    -------------------------------------------------------------------
        <= 100                  2.50 per unit
        
        > 100                   for first 100 units, 2.50 per unit
        <= 200                  next remaining units 3.00 per unit

        > 200                   for first 100 units, 2.50 per unit
                                for next 100 units, 3.00 per unit
                                for all remaining units, 3.50 per unit

    add Rs. 50 as fixed charges for each bill.

    print relevant details.

    20 minutes.

    jan 1       :   150  meter reading
    feb 1       :   250 meter reading

    feb bill : 250 - 150 = 100 units

    
Day - 2:
=============================================================================

int a = 10;
int b = a;
int c = 15;

switch (a) {
    case b : System.out.println("10");
             break;
    case c : System.out.println("15");
             break;
}

output:
--------
error : case expressions must be constant only, cannot be variables.


                                    loops
                                    ======
set of statements that are executed repeatedly.                                    -----

1) for
2) while
3) do..while
4) enhanced for loop

for:
----
statements are executed as long as the condition is true.
this is called as entry-tested or top-tested loop.

        [1]            [2]          [4]
for(initialization; condition; update expr) {
   statement(s);           [3]
   [break;] 
}


class Test {
    public static void main(String [] args) {
        for(int i = 1; i >= 10; i++) {
            System.out.println(i);
        }

    }
}

output:
-------
no output

is initilization is compulsory?
NO

int i = 1;
for( ; i >= 10; i++) {
    System.out.println(i);
}

is update expression is mandatory?
No

int i = 1;
for( ; i >= 10 ; ) {
    System.out.println(i);
}

is condition is mandatory?
No

for( ;  ; ) {
    System.out.println(i);
}

it will fall into an infinite loop. 

int i = 1;
for( ;  ; ) {
    System.out.println(i);
    if ( i == 10)
        break;
    i++;
}


5) Write a program to print all the factors of a given number.
eg: input : 12
    output : 
    1
    2
    3
    4
    6
    12

6) Write a program to print whether a given number is prime or not.
eg: input : 17
    output : prime

    input : 10
    output : composite

10 minutes.

7) write a program to print the following FLOYD triangles upto n rows.
eg: input : Enter no. of rows : 5
    output:

    1   2   3   4   5
        1   2   3   4
            1   2   3
                1   2
                    1

i => 1 to n

    s => 1 to i-1

    n   i       s
    --  --  -------
    5   1       0
        2       1
        3       2
        4       3
        5       4

                s = i - 1


        j =>    1 to n-i+1

        n   i       end of j
        --  --      ---------
        5   1           5
            2           4
            3           3
            4           2
            1           1

                    end of j = n - i + 1
                            5 - 2 + 1

for i = 1 to n {
    for s = 1 to i-1 {
        // print spaces
    }
    for j = 1 to n-i+1 {
        // print numbers

    }
}

8) write a program to accept numbers continuously till 0 is entered. findout the sum, average
of all these numbers.

int / int = int

10 / 2 = 5
10 / 3 = 3  

int / double = double
double / int = double
double / double  = double

10.0 / 3    =   3.3
10 / 3.0    =   3.3
10.0 / 3.0  =   3.3

type casting:
-------------
changing value from one type to other temporarily.
syntax:
-------
(datatype) var;

(double) sum / count
sum / (double) count


while:
------
    statements are executed repeatedly as long as the condition is true.
    this is called as entry-tested or top-tested loop.

syntax:
-------
    while (condition) {
        st-1;
        st-2;
        ....
        [break;]
    }

Factorial program:
    5! = 1 * 2 * 3 * 4 * 5 = 120

class Test {
    public static void main(String [] args) {
        Scanner scan = new Scanner(System.in);
        System.out.print("Enter number : ");
        int num = scan.nextInt();
        int fact = 1;
        for(int i = 2; i <= num; i++) {
            fact *= i;
        }
        System.out.println("Factorial : " + fact);
        scan.close();
    }
}

class Factorial {
    public static void main(String [] args) {
        Scanner scan = new Scanner(System.in);
        System.out.print("Enter number : ");
        int num = scan.nextInt();
        int fact = 1;

        int i = 2;
        while (i <= num) {
            fact *= i;
            i++;
        }
        
        System.out.println("Factorial : " + fact);
        scan.close();
    }
}

how can i choose between for & while?
-------------------------------------
    for loop should be used when you want to execute statement for a finite number of times.
    while loop should be used when you want to execute statements for in indefinite number of
    times.

write a program to enter numbers continuously until user press 0. findout the biggest
and smallest value among them.

10 mins.

for(;;) {

}

while(true) {

}

do .. while:
------------
statements are executed repeatedly as long as the condition is true.
this is called as exit-tested or bottom-tested loop.

do {
    st-1;
    st-2;
    ...
    [break;]
} while (condition);

it is generally used to write menu-driven programs.

what is the difference between break and continue?
--------------------------------------------------
whenever a break statement is encountered the control immediately comes out of the loop
without executing the remaining iterations.
whereas the continue statement will take you to the next iteration without executing the
remaining statements in the current iteration.


                                            arrays
                                            ======
linear collection of homogeneous data items stored under single name.
0 based index.
every array in java is an object.
array is provide a special property (field) with the name "length", that return no. of cells
in the memory.

if we try to access an element with an invalid index, leads to an exception.
"ArrayIndexOutOfBoundsException"

types of arrays:
-----------------
1) single dimension
2) multi-dimension
3) jagged 

single dimension:
-------------------
declaring:
----------
    datatype [] arrayName;
    (or)
    datatype arrayName[];

    just by declaring, no memory is allocated.

eg:
    int [] arr;

allocating memory:
------------------
    arrayName = new datatype[size];
eg:
    arr = new int[5];

    whenever we use "new" keyword, the memory is allocated dynamically and stored in a special
    memory area known as "heap".

declaring and allocating :
----------------------------
    datatype [] arrayName = new datatype[size];

eg:
    int [] arr = new int[5];

initialize an array:
---------------------
    int []  arr = {10,20,30,40,50}; 
    

class ArrayExample {
    public static void main(String [] args) {
        int [] arr = new int[5];

        for(int i = 0; i < 5; i++) {
            System.out.println(arr[i]);
        }
    }
}

int     -   default value   -   0
double  -                   -   0.0
String  -                   -   null
boolean -                   -   false


write a program to find min, max of an array.

enhanced for loop:
------------------
    there is no concept called "index".
	Enhanced for loop offer better performance than classic for loop.
	loop variable is not "int" unlike as in classic for loop.
	type of the loop variable is same as the type of array.
	We cannot process few elements in the array.

    it is used to traverse an entire array or a collection in forward-only direction.

    syntax:
    -------
        for(datatype variable : arrayName) {
            ...
        }

write a program to find number of ZEROs, EVENs and ODDs in an array.


Day-3
================================================================================

can we write multiple classes in a java file?
yes

can our class name and file name be different?
yes

is it mandatory to declare a class as public?
no

can we have multiple public classes in a java file?
no

can be the public class name and java file name are different?
no

what is the difference between a public class and non-public class?
...


linear search (sequential search) program.

sorting program (ascending order)
n = 5

(0) 50  20  20  20  20  20  20
(1) 20  50  35  27  27  27  27
(2) 35  35  50  50  41  35  35
(3) 41  41  41  41  50  50  41
(4) 27  27  27  35  35  41  50

i   j
--- ---
0   1
0   2
0   3
0   4
-----------
1   2
1   3
1   4
------------
2   3
2   4
------------
3   4
------------
n = 5

i : 0 to 3
    j : i+1 to 4

i : 0 to n-2
    j : i+1 to n-1

    a[i] > a[j]
        swap them


double dimension array:
-----------------------

            studentData
rollno      age     height      weight
1           ..      ..          ...
2
3



how do you declare?
    int [][] studentData = new int[3][4];

initialize?

    int [][] studentData = {
        {1, 25, 150, 60},
        {2, 21, 160, 45},
        {3, 19, 140, 36}
    };

every row in a double dimension array is treated as a single dimension array.

the "length" property of a double dimension array, always return no. of rows.
eg:
    studentData.length => 3
    studentData[0].length => 4
    studentData[1].length => 4
    studentData[2].length => 4

Jagged array:
-------------
It is also a double dimension array, where each row contain different number of columns.

eg:
    1   2
    3   4   5
    6   7   8   9
    10

int [][] jarr = {
    {1,2},
    {3,4,5},
    {6,7,8,9},
    {10}
}

                                        Command Line Arguments
                                        ----------------------

public static void main(String [] args) {

}

we cannot define main method like this ..
public static void main() {

}
it is treated as another method.


command line arguments are used to give inputs (parameters) to the main() method.
it is another way of accepting data.

write a program to print all command-line arguments.

write a program to accept two numbers and an arithmetic operation (ADD, SUB, MUL, DIV)
using command line arguments and perform the operation and print the result.

is int a primitive type ?	
		yes`
is String a primitive type?
		no
		String is a pre-defined class, it is a user-defined type.

How do you convert data of String to primitive type int?
    Integer -> parseInt(String form int)
    eg: 
        "10"    =>  Integer.parseInt("10") => 10
        "5"     =>  Integer.parseInt("5") => 5
        "ADD"   =>  

    Double.parseDouble(String form double)

        "10.5"  =>  Double.parseDouble("10.5") => 10.5
    
    for all illegal value, we get NumberFormatException.

Defensive programming:
----------------------
    avoid run-time errors using our logic.


                                            Functions
                                            =========

It is a sub program designed to perform a specific task that can be used repeatedly.
A function can have 0 or more inputs (arguments / parameters)
But a function can return 0 or 1 value only.

In java, we call functions as "methods".

Function components:
-----------------------
Function declaration    (function prototype)
Function definition     (function code)
Function call

Note:
In order to call a function in the main(), we should declare the function as static.
(or)
Create an object of the class, and access through the object.

formal parameters (formal arguments):
    paraameters given in the function definition.
actual parameters (actual arguments):
    parameters given in the function call.

function calling:
-----------------
1) call-by-value    (sending values)
        for all primitive types, the default mechanism is "call-by-value".
2) call-by-reference (seding references)
        for all objects, the default mechanism is "call-by-reference".


    x = 10       (x)   --->     fn()    --> x++
    x = 10        <------------------------------   call-by-value       
    x = 11        <------------------------------   call-by-reference

can you send array as parameter to function?
yes

can we return array from a function?
yes

write a function to return the reversed array of a given array.
(or)
write a function to accept an array and reverse the array itself and return the reveresed array.


    static void show(int x, double y, String z) {
        System.out.println(x + "\t" + y + "\t" + z);
    }

    public static void main(String [] args) {
        show(5, 10.5, "Java");
        show(5, 10.5);
        show(5);
        show();
    }

actual parameters (3)           formal parameters (3)
actual parameters (2)
actual parameters (1)
actual parameters (0)

rule:
-----
    no. of actual parameters = no. of formal parameters


        sum of few numbers.


        sum(10,20)      ==> 30
        sum(1,2,3,4,5)  ==> 15
        sum(3)          ==> 3

        int sum(int [] arr) {

        }


                                            VarArgs
                                            -------
Variable Arguments
    it represents indefinite number of arguments
    it is represented with ... (three dots)
    three dot symbol "ellipsis".

    we can pass any number of arguments while calling this type of function.

    Command Line Arguments can also be represeted as Variable Arguments.



                                        Function Overloading
                                        ---------------------
when two or more functions are having the same name but with different set of parameters ,
the it is said to be function overloading.

int area(int a, int b) {

}

int area(int a, double b) {

}       // allowed

int area(double a, int b) {

}   // allowed

double area(int a, int b) {

}   // NOT ALLOWED - return type is not considered


                                        Recursion
                                        ----------
calling the same function being in itself.

            int factorial(int  num) {
                if (num == 0) {
                    return 1;
                } else {
                    return num*factorial(num-1);
                }
            }


Day - 4
------------------------------------------------------------------------------

    int [] arr1 = {10,20,30,40,50};
    int [] arr2 = arr1;             // valid 
    System.out.println(arr1);       // values are not displayed. reference is displayed.
    System.out.println(arr2);

    for(int i = 0; i < 5; i++) {
        arr1[i]++;
    }

    for(int val : arr1) {
        System.out.println(val);
    }                               // 11,21,31,41,51

    for(int val : arr2) {
        System.out.println(val);    // 11,21,31,41,51
    }


Arrays class: (java.util package)
----------------------------------
provide many util methods to simplify our programming.
explore these methods.

1) copyOf()
2) binarySearch()
3) sort()
4) fill()

whenever we == on arrays to check for equality, references are compared, not data.

5) equals()
6) deepEquals()


                                OOPS (Object Oriented Programming System)
                                =========================================
It is a programming paradigm.

1) monolithic   : Assembly language
2) procedure oriented   :   COBOL
3) structured   :   'C'
4) object oriented 
    +   data is given more importance than logic
    +   object contain it's own data and related operations


OOAD        (Object Oriented Analysis and Design)
-------------------------------------------------
    class diagram
    use case diagram
    sequence diagram

    actor

class   :  it is a user-defined datatype that represent an entity in terms of properties
           (variables / fields / data members) and behaviours (methods).
           it is a re-usable software component.

           classes we are going to create also called as models, pojos, beans etc.,
           POJO (plain old java object)

object  :  it is the entity itself.

Employee
    id
    name
    dateJoined
    salary

state:
    whenever an operation is done on the object, properties will change. this is called 
    state is modified.

Account
    id : 101            name : srinivas         balance : 10000     (current statement)

            operation (deposit - 5000)

                                                balance : 15000     (new state)

datatype    <---    value
int = 50;

datatype    <--     variable    <-- value

Employee    <--     object         <--  data


define a class:
-----------------
class   ClassName {
    datatype dataMember1;
    returnType method1() {

    }
    returnType method2() {

    }
}

No memory is allocated when we define a class.

declare an object:
------------------
className   objectName = new className();

the "new" keyword allocate memory for an object.

features:
---------
1) Encapsulation
        nothing but data hiding.
        providing setters (mutators) and getters (accessors) to access private data members
        to other classes.
        setters are used to provide initial value or to modify existing value of a data member.
        getters are used to retrieve current value of data members.


2) Abstraction
        nothing but behaviour hiding.
3) Data hiding:
        make data members as private.
        so that they are not accessible from outside of the class.
        

ComplexNumber
    realPart
    imaginaryPart

Access Specifiers (Access modifiers)
-------------------------------------
1) default : which is taken when no specific access is given on members.
    any member under default can be accessed only in the current package.
2) private : members under this access can be used only within the class in which they
             are declared.
3) public  : members under this access can be used everywhere, wherever the package is visible.
4) protected : members under this access can be used either within the class or any of it's
             sub class.

"this" reference:
-----------------
it refer to "implied object".
implied object is the object is the one, on which the current method is called.

Constructor
---------------
It is a special method which is automatically executed whenever an object is created.
It is used to initialize data members.
It should have same name as that of class.
A class can have many constructors. this feature is called "constructor overloading".
It cannot return any value, and should not be marked as void.

types of contructors:
-----------------------
1) default constructors     (no-parameter constructor)
2) parameter constructor    (parameterized / parametric constructor)
3) copy constructor:
    it takes object of the same class as parameter.
    it is automatically executed whenever we are creating a new object by passing an
    existing object as a parameter.

class  Student {
    private int rollNumber;
    private String name;

    public Student(int rollNumber, String name) {
        this.rollNumber = rollNumber;
        this.name = name;
    }

    /* setters are getters */
}

class StundentApp {
    public static void main(String [] args) {
        Student s1 = new Stundent();
        System.out.println(s1.getRollNumber() + "\t" + s1.getName());

    }
}


























